// Generated by CoffeeScript 1.3.3
(function() {
  var Room, ServerAction, error;

  error = require('./error');

  ServerAction = (function() {

    ServerAction.prototype.maxRoomSize = function() {
      return 2;
    };

    function ServerAction(sockets) {
      this.sockets = sockets;
    }

    ServerAction.prototype.getClientAmount = function(roomId) {
      return this.sockets.clients(roomId).length;
    };

    ServerAction.prototype.joinRoom = function(socket, roomId) {
      var clients, err;
      clients = this.getClientAmount(roomId);
      if (clients < this.maxRoomSize()) {
        socket.join(roomId);
        return this.sockets["in"](roomId).emit('room-joined', {
          'id': socket.sessid
        });
      } else {
        err = new error.ServerError("Room " + roomId + " is full", error.code.roomFull);
        socket.emit('error', err.toObject());
        return socket.disconnect();
      }
    };

    ServerAction.prototype.disconnect = function(socket) {
      var room, rooms, _i, _len, _results;
      rooms = this.sockets.manager.roomClients[socket.id];
      _results = [];
      for (_i = 0, _len = rooms.length; _i < _len; _i++) {
        room = rooms[_i];
        _results.push(this.sockets["in"](room).emit('room-left', {
          'id': socket.sessid
        }));
      }
      return _results;
    };

    return ServerAction;

  })();

  Room = (function() {

    function Room() {}

    return Room;

  })();

  module.exports.ServerAction = ServerAction;

  module.exports.Room = Room;

}).call(this);
