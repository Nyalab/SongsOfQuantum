// Generated by CoffeeScript 1.3.3
(function() {
  var NetworkLayer, Room, ServerAction, error;

  error = require('./error');

  NetworkLayer = (function() {

    function NetworkLayer(socket, sockets) {
      this.socket = socket;
      this.sockets = sockets;
    }

    NetworkLayer.prototype.tagMessage = function(message) {
      message['author-id'] = this.socket.handshake.sessionId;
      message['served-at'] = (new Date()).getTime() / 1000;
      return message;
    };

    NetworkLayer.prototype.sendRoomJoined = function(roomId) {
      return this.sockets["in"](roomId).emit('room-joined', this.tagMessage({}));
    };

    NetworkLayer.prototype.sendRoomLeft = function(roomId) {
      return this.sockets["in"](roomId).emit('room-left', this.tagMessage({}));
    };

    return NetworkLayer;

  })();

  ServerAction = (function() {

    ServerAction.prototype.maxRoomSize = function() {
      return 2;
    };

    function ServerAction(sockets) {
      this.sockets = sockets;
    }

    ServerAction.prototype.getClientAmount = function(roomId) {
      return this.sockets.clients(roomId).length;
    };

    ServerAction.prototype.joinRoom = function(socket, roomId) {
      var clients, err, networkLayer;
      clients = this.getClientAmount(roomId);
      if (clients < this.maxRoomSize()) {
        socket.join(roomId);
        networkLayer = new NetworkLayer(socket, this.sockets);
        return networkLayer.sendRoomJoined(roomId);
      } else {
        err = new error.ServerError("Room " + roomId + " is full", error.code.roomFull);
        socket.emit('error', err.toObject());
        return socket.disconnect();
      }
    };

    ServerAction.prototype.disconnect = function(socket) {
      var bool, networkLayer, roomId, rooms, _results;
      rooms = this.sockets.manager.roomClients[socket.id];
      networkLayer = new NetworkLayer(socket, this.sockets);
      _results = [];
      for (roomId in rooms) {
        bool = rooms[roomId];
        if (roomId !== "") {
          _results.push(networkLayer.sendRoomLeft(roomId.replace('/', '')));
        }
      }
      return _results;
    };

    return ServerAction;

  })();

  Room = (function() {

    function Room() {}

    return Room;

  })();

  module.exports.ServerAction = ServerAction;

  module.exports.Room = Room;

}).call(this);
